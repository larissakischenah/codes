# -*- coding: utf-8 -*-
"""analise_alg_ex01_anagramas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bQMHGy2OJyJrr115Qj6bBbeizmvO4Spl

Como vimos na Introdução à análise, existem diversas forma de solução.

Um exemplo de algoritimos que são usados como soluções para se encontrar percentuais relativos à similaridade.

Existem duas formas de ser feito:

1 Construindo funções e com uso de expressões para comparações

2 Usando recursos pré-definidos, considera-se que acima de 60% do resultado há ocorrência.

# Qual seria o mais complexo?

# Porquê?
"""

# 1 ª Solução, com uso de função e expressões de comparação
def anagramas(str1):
  if len(str1)<=1:
    return str1
  else:
    tmp=[]
    for aux in anagramas(str1[1:]):
            for i in range(len(str1)):
                tmp.append(aux[:i] + str1[0:1] + aux[i:])
    return tmp

str1='probably'
str2='porbalby'
str1=str1.upper()
str2=str2.upper()
print(f'******Checando se {str2} é um anagrama de {str1}:********')
print('---------------------------')
lista = anagramas(str1)
if(str2 in lista): #busca a incidência na lista de anagramas
  print(f'{str2} é um anagrama de {str1}')
else:
  print(f'{str2} não é um anagrama de {str1}')

#com uso do de recursos
def similar (str2, str1):
  return SequenceMatcher(None, str2, str1).ratio() 
str1='pale'
str2='ple'
str1=str1.upper()
str2=str2.upper()
a=similar (str2, str1)
arred=round(a,2)
if (arred==1.0):
  print(f'{str2} é igual à chave {str1}')
elif (arred<1.0):
  print(f'{str2} têm de chance de ser um erro de digitação')